package fractal;

import math.Complex;

/** Класс, реализующий интерфейс {@link Fractal}, представляет из себя описание множества Мандельброта*/
public class Mandelbrot implements Fractal {

    //ограничение по n в рекурретном соотношении: z_(n+1) = (z_n)^2 + c
    private int maxIters = 200;
    /* Действительное число R, относительно которого будет выполняться неравенство:
    * |z_n| < R, т.е. будут выбираться те точки с, которые по вышеуказанному соотношению
    * удовлетворяют данному неравенству.
    * Обратить внимание на то, что r2 = R^2 для упрощения дальнейших вычислений */
    private double r2 = 4;

    /** Метод, устанавливающий количество итераций для реккуретного соотношения:
     * z_(n+1) = (z_n)^2 + c
     * @param value - число итераций
     * */
    public void setMaxIters(int value){
        //Число итераций должно быть не менее 5 (собственное соглашение)
        maxIters = Math.max(5, value);
    }

    /** Метод, устанавливающий число R для неравенства |z_n| < R
     * @param value представляет из себя само число R
     * */
    public void setR(int value){
        //Число R должно быть не менее 0.1 (собственное соглашение)
        var r = Math.max(0.1, value);
        //Число R возводится в квадрат, результат сохраняет поле r2, нужно это для упрощения дальнейших вычислений
        r2 = r*r;
    }

    /** Метод, проверяющий точку с на принадлежность множеству Мандельброта по реккуретному соотношению:
     * z_(n+1) = (z_n)^2 + c
     * @param c проверяемая точка с
     * @return true если точка с принадлежит множеству, иначе false
     * */
    @Override
    public boolean isInSet(Complex c) {
        //z0 = 0 по условию формулы, конструктор по умолчанию устанавливает (0, 0)
        var z = new Complex();
        for (int i = 0; i<maxIters; i++){
            //Выполнение z_(n+1) = (z_n)^2 + c
            z.timesAssign(z).plusAssign(c);

            //Проверка |z_n| < R, но в данном случае происходит проверка: |z_n|^2 < R^2, тем сам упрощая вычисления
            if (z.abs2() > r2) return false;
        }
        return true;

    }
}
